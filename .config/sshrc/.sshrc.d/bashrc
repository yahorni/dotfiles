#!/bin/bash

# editor
setup_editor() {
    local editors=(nvim vim vi nano)
    for editor in "${editors[@]}"; do
        if command -v "$editor" 1>/dev/null; then
            export EDITOR="$editor"
            break
        fi
    done
}
setup_editor

# colors
export GREP_COLOR='1;31'
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

# settings
export LESS='-RMx4'
export LESSHISTFILE='-'
export SYSTEMD_PAGER='less'

# path
export PATH="$PATH:$HOME/.local/bin"

# disable Ctrl-R freeze
stty -ixon

# prompt
set_prompt() {
    local default='\[\e[39;0m\]'
    local bold='\[\e[1m\]'

    local blue='\[\e[34m\]'
    local magenta='\[\e[35m\]'

    # shellcheck disable=SC2155
    local symbol=$([ "$EUID" -eq 0 ] && printf '#' || printf '$')

    PS1="\[$bold$magenta\][\u@\h \[$blue\]\W\[$magenta\]]\[$default\]$symbol "
}
set_prompt

# disable prompt command
unset PROMPT_COMMAND 2>/dev/null

# options
set -o vi
shopt -s autocd
shopt -s cdspell
shopt -s checkwinsize
shopt -s direxpand

# bindings
bind TAB:menu-complete
bind 'set show-all-if-ambiguous on'
bind -m vi-command 'Control-l: clear-screen'
bind -m vi-insert 'Control-l: clear-screen'

# colors
alias \
    ls='ls --color=auto --group-directories-first' \
    grep='grep --color=auto'

# fast ls
alias \
    la='ls -A' \
    ll='ls -lsh' \
    l='ls -lAsh'

# progs
alias \
    v='${EDITOR}' \
    sv='sudo ${EDITOR}' \
    sc='systemctl' \
    scu='systemctl --user' \
    ssc='sudo systemctl' \
    p3='python3' \
    cp='cp -ri' \
    mim='file --mime-type'

# git
alias \
    gst='git status' \
    gd='git diff' \
    gds='git diff --staged' \
    ga='git add' \
    gc='git commit' \
    gps='git push' \
    gpl='git pull' \
    gl='git log --oneline --graph --branches' \
    glo='git log --oneline --graph' \
    gb='git branch' \
    gch='git checkout' \
    gr='git remote' \
    gsh='git stash' \
    gcp='git cherry-pick' \
    grs='git reset' \
    gm='git merge' \
    gsb='git submodule' \
    ghist='git log --follow -p --' \
    grb='git rebase' \
    gff='git log --full-history --' \
    gff1='git log --full-history -1 --' \
    gcl='git clean -dfx' \
    grp='git remote prune'

# files
alias \
    vh='${EDITOR} ${HISTFILE:-$HOME/.bash_history}' \
    vb='${EDITOR} ${HOME}/.bashrc' \
    vg='${EDITOR} .gitignore' \
    vt='${EDITOR} TODO.md' \
    v_='${EDITOR} $_'
# shellcheck disable=SC2139
if [ "${EDITOR}" = 'nvim' ]; then
    alias vv="${EDITOR} .config/nvim/init.vim"
elif [ "${EDITOR}" = 'vim' ] || [ "${EDITOR}" = 'vi' ]; then
    alias vv="${EDITOR} .vimrc"
fi

# directories
alias \
    .1='cd ..' \
    .2='cd ../..' \
    .3='cd ../../..' \

# utils
cdj() {
    cd "$HOME/prog" || return 1
    [ -n "$1" ] && cd "$1" || return 1
}

scr() {
    bindir="$HOME/.local/bin"
    file="$(cd "$bindir" || return 1 ; find . -type f | fzf)"
    [ -n "$file" ] && $EDITOR "$bindir/$file"
}

snc() {
    watch -d grep -e Dirty: -e Writeback: /proc/meminfo
}

# completions for aliases
test -f /usr/share/bash-completion/bash_completion && \
    source /usr/share/bash-completion/bash_completion

if [ -f '/usr/share/bash-completion/completions' ]; then
    completions='/usr/share/bash-completion/completions'
    # systemctl
    source "${completions}/systemctl"
    complete -F _systemctl systemctl sc ssc scu
    # git
    source "${completions}/git"
    __git_complete gd _git_diff
    __git_complete ga _git_add
    __git_complete gb _git_branch
    __git_complete gc _git_commit
    __git_complete gr _git_remote
    __git_complete gm _git_merge
    __git_complete gst _git_status
    __git_complete gch _git_checkout
    __git_complete gps _git_push
    __git_complete gpl _git_pull
    __git_complete grs _git_reset
    __git_complete grb _git_rebase
    __git_complete gsh _git_stash
    __git_complete gcp _git_cherry_pick
    __git_complete gsb _git_submodule
fi

# cdj
_cdj() { COMPREPLY=($(cd "$HOME/prog" || return 1 ; compgen -d "$2")) ; }
complete -F _cdj cdj

# extra settings (for temporary purposes)
[ -f "$HOME/.config/on_shell.sh" ] && source "$HOME/.config/on_shell.sh"
