" .vimrc
" vim: ts=2 sts=2 sw=2 et fdm=marker fdl=0

set nocompatible
syntax on

" set leader key
let mapleader=' '
let maplocalleader=','

" {{{ FILETREE
let g:netrw_banner = 0
let g:netrw_list_hide = '^\./'
let g:netrw_liststyle = 3
let g:netrw_dirhistmax = 0
nn <silent> <C-n> :Explore<CR>
nn <silent> <leader>n :Explore %:p:h<CR>
nn <silent> <leader>N :Lexplore<CR>
au FileType netrw nn <silent><buffer> r <Plug>NetrwRefresh
" }}}

" {{{ OPTIONS
" status line
set laststatus=2
" encoding/fileformat
set encoding=utf-8
set fileencodings=utf-8,cp1251,ucs-2,koi8-r,cp866
set fileformat=unix
set fileformats=unix,dos,mac
set endofline
" search
set incsearch
set hlsearch          " can cause slowdown in huge files
" case-insensitive searching UNLESS \C or capital in search
set ignorecase
set smartcase
" tab/space
set tabstop=4         " width for Tab
set shiftwidth=4      " width for shifting with '>>'/'<<'
set softtabstop=4     " width for Tab in inserting or deleting (Backspace)
set smarttab
set expandtab
" indetation
set autoindent
set breakindent
" nonprintable characters
set list
set listchars=tab:>\ ,trail:·,nbsp:␣
" line numbers
set number
set relativenumber    " can cause slowdown
" info/swap/backup
set viminfo="-"       " can't use single quotes here
set nobackup
set nowritebackup
set noundofile
" modeline
set modeline
set modelines=5
" messages in last line
set noshowmode
set showcmd           " can cause slowdown
" wildmenu
set wildmenu
set wildmode=longest,full
" mouse
set mouse=a
" folding
set foldmethod=indent
set foldlevel=99
" splits
set splitbelow
set splitright
" conceal
set conceallevel=0
set concealcursor=nvic
" tags
set tags=./tags,tags,~/.local/share/tags
set notagrelative     " disable directory prefix for tag file
" spell
set spell
set spelllang=
" file search
set path+=**
set wildignore+=*/build/*,*/.git/*,*/node_modules/*
" enable system clipboard
set clipboard=unnamedplus
" minimal lines before/after cursor
set scrolloff=5
" do not autoreload changed file
set noautoread
" highlight current line
set nocursorline      " can cause slowdown
" do not indent: N-s - namespaces, g0 - public/private/protected
set cinoptions=N-s,g0
" enable <> pair
set matchpairs+=<:>
" do not save quickfix to session file
set sessionoptions-=blank,folds
" ignore local .vimrc
set noexrc
" shorten vim messages
set shortmess=atT
" text width
set textwidth=120
set colorcolumn=120
" window title
set title
" make buffer hidden when it's abandoned
set hidden
" do show extra information about the currently selected completion
set completeopt-=preview
" }}}

" {{{ MAPPINGS

" disable Ex mode
nn Q <nop>
nn <C-f> <nop>

" disable space action
nn <Space> <nop>
vn <Space> <nop>

" annoying keys
com! W :w
com! -bang W :w<bang>
com! Q :q
com! -bang Q :q<bang>
com! Wq :wq
com! -bang Wq :wq<bang>
com! WQ :wq
com! -bang WQ :wq<bang>
com! Qa :qa
com! -bang Qa :qa<bang>
com! QA :qa
com! -bang QA :qa<bang>

" normal mode bindings
nn <silent> <leader>H :noh<CR>
nn Y y$
nn zq ZQ
" open next buffer
nn <silent> gB :bNext<CR>
" buffer close
nn <silent> <C-q> :close<CR>
" update file and search
nn <silent> <A-n> :e<CR>n
nn <silent> <A-N> :e<CR>N
" }}}

" {{{ CURSOR
" NOTE: different cursors per mode
if (&term!='linux' && has('nvim'))
  if exists('$TMUX')
    let &t_SI = '\ePtmux;\e\e[6 q\e\\'
    let &t_SR = '\ePtmux;\e\e[4 q\e\\'
    let &t_EI = '\ePtmux;\e\e[2 q\e\\'
  else
    let &t_SI = '\e[6 q'
    let &t_SR = '\e[4 q'
    let &t_EI = '\e[2 q'
  endif
endif
" }}}

" {{{ SPLIT/RESIZE
function! ToggleResizeSplitMode()
  if !exists('b:SplitResize')
    let b:SplitResize=1
    echo 'Resizing enabled'
  else
    unlet b:SplitResize
    echo 'Resizing disabled'
  endif
endfunction

nn <silent> <expr> <C-h> !exists('b:SplitResize') ? '<C-w><C-h>' : ':vert res -1<CR>'
nn <silent> <expr> <C-j> !exists('b:SplitResize') ? '<C-w><C-j>' : ':res -1<CR>'
nn <silent> <expr> <C-k> !exists('b:SplitResize') ? '<C-w><C-k>' : ':res +1<CR>'
nn <silent> <expr> <C-l> !exists('b:SplitResize') ? '<C-w><C-l>' : ':vert res +1<CR>'
 " NOTE: it's better to not remap ESC button
nn gR :call ToggleResizeSplitMode()<CR>
" }}}

" {{{ TABS
nn <silent> gt <nop>
nn <silent> gth :tabprev<CR>
nn <silent> gtl :tabnext<CR>
nn <silent> gtt :exe "tabnew".(len(@%)>0?" %":"")<CR>
nn <silent> gtc :tabclose<CR>
nn <silent> gtH :tabmove -1<CR>
nn <silent> gtL :tabmove +1<CR>

" switch to tab by number
nn <leader>1 1gt
nn <leader>2 2gt
nn <leader>3 3gt
nn <leader>4 4gt
nn <leader>5 5gt
nn <leader>6 6gt
nn <leader>7 7gt
nn <leader>8 8gt
nn <leader>9 9gt
nn <silent> <leader>0 :tablast<CR>
" }}}

" {{{ SESSION
let g:session_file = 'session.vim'
nn <silent> <leader>m :execute 'mksession! '.g:session_file <bar> echo 'Session saved to '.g:session_file<CR>
nn <silent> <leader>l :execute 'source '.g:session_file<CR>
nn <silent> <leader>R :execute '!rm '.g:session_file<CR><CR>:echo 'Session removed'<CR>
" }}}

" {{{ STYLES
" tab style (2 spaces)
au FileType c,cpp,javascript,yaml,vim,cmake
  \ setlocal tabstop=2 |
  \ setlocal shiftwidth=2 |
  \ setlocal softtabstop=2
au FileType gitconfig,make setlocal noexpandtab
au FileType markdown,text setlocal textwidth=0
" }}}

" {{{ FORMATTERS
nn <C-f> :echo 'No specific formatter set'<CR>gg=G
" clang-format | c/c++, js/ts, proto
if executable('clang-format')
  au FileType c,cpp,javascript,typescript,proto nn <buffer> <C-f> :!clang-format -i %<CR><CR>:e<CR>
  au FileType c,cpp,javascript,typescript,proto vn <buffer> <C-f> :%!clang-format --assume-filename=%<CR>
endif
" shfmt | shell
if executable('shfmt')
  au FileType sh nn <buffer> <C-f> :%!shfmt -i 4<CR>
  au FileType sh vn <buffer> <C-f> :%!shfmt -i 4<CR>
endif
" jq | json
if executable('jq')
  au FileType json nn <buffer> <C-f> :%!jq .<CR>
  au FileType json vn <buffer> <C-f> :%!jq .<CR>
endif
" prettier | yaml, html, css
if executable('prettier')
  au FileType yaml,html,css nn <buffer> <C-f> :!prettier --write %<CR>
endif
" xmllint | xml
if executable('xmllint')
  au FileType xml nn <buffer> <C-f> :%! xmllint --format --recover - 2>/dev/null<CR>
  au FileType xml vn <buffer> <C-f> :! xmllint --format --recover - 2>/dev/null<CR>
endif
" }}}

" {{{ MISC
" file executing
nn <leader>x :!chmod +x %<CR>
nn <leader>X :!chmod -x %<CR>

" search visually selected text with '//'
vn // y/\V<C-R>=escape(@",'/\')<CR><CR>

" replace visually selected text
vn <leader>S y:%s/<C-R>+//g<Left><Left>

" remove trailing whitespaces
nn <silent> <leader>W :%s/\s\+$//e <bar> nohl<CR>
vn <silent> <leader>W y:'<,'>s/\s\+$//e <bar> nohl<CR>

" remove empty lines
nn <silent> <leader>E :g/^$/d<CR>

" squish consecutive duplicates lines
nn <silent> <leader>dl :%s;\v^(.*)(\n\1)+$;\1;<CR>

" remove swaps
nn <leader>dw :!rm -f ~/.local/state/nvim/swap/*<CR>

" search for exact word
nn <silent> <leader>/ /\<\><Left><Left>

" git blame
nn gb :execute '!git blame -L '.max([eval(line('.')), 1]).',+'.min([eval(line('$')-line('.')+1),10]).' %'<CR>

" prevent 'file changed' warnings
autocmd FileChangedShell * :

" close all buffers except opened one
command! BufOnly silent! execute '%bd|e#|bd#'
" }}}
