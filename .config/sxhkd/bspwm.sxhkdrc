# vim: sxhkdrc
# bspwm
super + r
    bspc wm -r

super + {h,j,k,l}
    opt={1,2,3,4} ; \
    if bspc query -N -n focused.tiled; then \
        case $opt in ; \
            1) bspc node -f west.tiled ;; \
            2) bspc node -f south.tiled ;; \
            3) bspc node -f north.tiled ;; \
            4) bspc node -f east.tiled ;; \
        esac ; \
    elif bspc query -N -n focused.floating; then \
        case $opt in ; \
            1) bspc node -f prev.floating.local ;; \
            2) bspc node -f older.floating.local ;; \
            3) bspc node -f newer.floating.local ;; \
            4) bspc node -f next.floating.local ;; \
        esac ; \
    fi

super + {Left,Down,Up,Right}
    opt={1,2,3,4} ; \
    if bspc query -N -n focused.tiled; then \
        case $opt in ; \
            1) bspc node -f west.tiled ;; \
            2) bspc node -f south.tiled ;; \
            3) bspc node -f north.tiled ;; \
            4) bspc node -f east.tiled ;; \
        esac ; \
    elif bspc query -N -n focused.floating; then \
        case $opt in ; \
            1) bspc node -f prev.floating.local ;; \
            2) bspc node -f older.floating.local ;; \
            3) bspc node -f newer.floating.local ;; \
            4) bspc node -f next.floating.local ;; \
        esac ; \
    fi

super + shift + {h,j,k,l}
    opt={1,2,3,4} ; \
    if bspc query -N -n focused.tiled; then \
        case $opt in ; \
            1) bspc node -s west  ;; \
            2) bspc node -s south ;; \
            3) bspc node -s north ;; \
            4) bspc node -s east  ;; \
        esac ; \
    elif bspc query -N -n focused.floating; then \
        case $opt in ; \
            1) bspc node -v -20 0 ;; \
            2) bspc node -v 0 20  ;; \
            3) bspc node -v 0 -20 ;; \
            4) bspc node -v 20 0  ;; \
        esac ; \
    fi

super + alt + {h,j,k,l}
    opt={1,2,3,4} ; \
    if bspc query -N -n focused.floating; then \
        case $opt in ; \
            1) bspc node -z left -20 0 ;; \
            2) bspc node -z top 0 20 ;;   \
            3) bspc node -z top 0 -20 ;;  \
            4) bspc node -z left 20 0 ;;  \
        esac ; \
    elif bspc query -N -n focused.tiled; then \
        case $opt in ; \
            1) bspc node -z left 15 0 ; bspc node -z right -15 0 ;; \
            2) bspc node -z bottom 0 -15 ; bspc node -z top 0 15 ;; \
            3) bspc node -z bottom 0 15 ; bspc node -z top 0 -15 ;; \
            4) bspc node -z left -15 0 ; bspc node -z right 15 0 ;; \
        esac ; \
    fi

super + alt + shift + {j,k}
    if bspc query -N -n focused.floating; then \
        resizer {-,+} 5 ; \
    fi

super + {_,shift + }q
    bspc node -{c,k}

control + alt + BackSpace
    bspc quit

super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} '^{1-9,10}'

control + super + {h,l}
    bspc desktop -f {prev,next}.local.occupied

control + super + {Left,Right}
    bspc desktop -f {prev,next}.local.occupied

super + {_,shift +}y
    bspc node @focused:/ --flip {vertical,horizonal}

super + {_,shift +}u
    bspc node @focused:/ --rotate {90,270}

super + {_,shift +}i
    bspc node @parent --rotate {90,270}

super + f
    bspc node -t \~fullscreen

super + space
    if bspc query -N -n focused.tiled; then \
        bspc node -f next.floating.local ; \
    elif bspc query -N -n focused.floating; then \
        bspc node -f next.tiled.local ; \
    fi

super + shift + space
    if bspc query -N -n focused.tiled; then \
        bspc node -t floating ; \
    elif bspc query -N -n focused.floating; then \
        bspc node -t tiled ; \
    fi

super + comma
    bspc node -g sticky

super + period
    winID="$(bspc query -N -n .hidden | tail -n1)" ; \
    bspc node $winID --to-desktop focused ; \
    bspc node $winID -g hidden=off ; \
    bspc node -f $winID

super + slash
    bspc node -g hidden
