# terminal
super + {_,shift +} e
    $TERMINAL {_,-c dropdown}

super + Return
    $TERMINAL
super + shift + Return
    samedir

# programs
super + grave
    $TERMINAL -e htop

super + w
    $TERMINAL -e ncmpcpp

super + t
    $TERMINAL -e newsboat -q
super + shift + t
    $TERMINAL -e transmission-remote-cli

super + p
    power_manager
super + shift + p
    fastkill

super + {_, shift +} a
    power_manager {suspend,lock}

super + s
    openprj
super + shift + s
    code || st -e $EDITOR

super + d
    dmenu_run
super + shift + d
    $TERMINAL -e calcurse -D "$XDG_CONFIG_HOME"/calcurse

super + {_, shift +} g
    corner_window {_,-H left}

# messengers
super + x
    telegram-desktop & bspc desktop -f IX
super + shift + x
    slack & bspc desktop -f VIII

super + v
    $TERMINAL -e vifmrun
super + shift + v
    $TERMINAL -e neomutt

# clipboard
super + c
    show_selections
super + shift + c
    clipmenu

# refreshing
super + r
    bspc wm -r
super + shift + r
    pkill -USR1 -x sxhkd

# browser
super + b
    pgrep $BROWSER || $BROWSER
super + shift + b
    $BROWSER

# mounting
super + {_, shift +} m
    dmenu_{_,un}mount

# music
super + {_,shift +} n
    mpc {toggle,stop}

super + {minus,equal}
    mpc {prev,next}

super + shift + {minus,equal}
    mpc seek {-,+}5

XF86Audio{Play,Stop}
    mpc {toggle,stop}

XF86Audio{Next,Prev}
    mpc {next,prev}

shift + XF86Audio{Next,Prev}
    mpc seek {+,-}10

# screenshots
Print
    makescreen
ctrl + Print
    makescreen window
@shift + Print
    makescreen part

# bspwm
super + {h,j,k,l}
    opt={1,2,3,4} ; \
    if bspc query -N -n focused.tiled; then \
        case $opt in ; \
            1) bspc node -f west.tiled ;; \
            2) bspc node -f south.tiled ;; \
            3) bspc node -f north.tiled ;; \
            4) bspc node -f east.tiled ;; \
        esac ; \
    elif bspc query -N -n focused.floating; then \
        case $opt in ; \
            1) bspc node -f prev.floating.local ;; \
            2) bspc node -f older.floating.local ;; \
            3) bspc node -f newer.floating.local ;; \
            4) bspc node -f next.floating.local ;; \
        esac ; \
    fi

super + {Left,Down,Up,Right}
    opt={1,2,3,4} ; \
    if bspc query -N -n focused.tiled; then \
        case $opt in ; \
            1) bspc node -f west.tiled ;; \
            2) bspc node -f south.tiled ;; \
            3) bspc node -f north.tiled ;; \
            4) bspc node -f east.tiled ;; \
        esac ; \
    elif bspc query -N -n focused.floating; then \
        case $opt in ; \
            1) bspc node -f prev.floating.local ;; \
            2) bspc node -f older.floating.local ;; \
            3) bspc node -f newer.floating.local ;; \
            4) bspc node -f next.floating.local ;; \
        esac ; \
    fi

super + shift + {h,j,k,l}
    opt={1,2,3,4} ; \
    if bspc query -N -n focused.tiled; then \
        case $opt in ; \
            1) bspc node -s west  ;; \
            2) bspc node -s south ;; \
            3) bspc node -s north ;; \
            4) bspc node -s east  ;; \
        esac ; \
    elif bspc query -N -n focused.floating; then \
        case $opt in ; \
            1) bspc node -v -20 0 ;; \
            2) bspc node -v 0 20  ;; \
            3) bspc node -v 0 -20 ;; \
            4) bspc node -v 20 0  ;; \
        esac ; \
    fi

super + alt + {h,j,k,l}
    opt={1,2,3,4} ; \
    if bspc query -N -n focused.floating; then \
        case $opt in ; \
            1) bspc node -z left -20 0 ;; \
            2) bspc node -z top 0 20 ;;   \
            3) bspc node -z top 0 -20 ;;  \
            4) bspc node -z left 20 0 ;;  \
        esac ; \
    elif bspc query -N -n focused.tiled; then \
        case $opt in ; \
            1) bspc node -z left 15 0 ; bspc node -z right -15 0 ;; \
            2) bspc node -z bottom 0 -15 ; bspc node -z top 0 15 ;; \
            3) bspc node -z bottom 0 15 ; bspc node -z top 0 -15 ;; \
            4) bspc node -z left -15 0 ; bspc node -z right 15 0 ;; \
        esac ; \
    fi

super + alt + shift + {j,k}
    if bspc query -N -n focused.floating; then \
        read w h <<< `resizer {-,+} 3` ; \
        xdotool windowsize `xdotool getwindowfocus` $w $h ; \
    fi

super + {_,shift + }q
    bspc node -{c,k}

control + alt + BackSpace
    bspc quit

super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} '^{1-9,10}'

control + super + {h,l}
    bspc desktop -f {prev,next}.local.occupied

control + super + {Left,Right}
    bspc desktop -f {prev,next}.local.occupied

super + {_,shift +}y
    bspc node @focused:/ --flip {vertical,horizonal}

super + {_,shift +}u
    bspc node @focused:/ --rotate {90,270}

super + f
    bspc node -t \~fullscreen

super + space
    if bspc query -N -n focused.tiled; then \
        bspc node -f next.floating.local ; \
    elif bspc query -N -n focused.floating; then \
        bspc node -f next.tiled.local ; \
    fi

super + shift + space
    if bspc query -N -n focused.tiled; then \
        bspc node -t floating ; \
    elif bspc query -N -n focused.floating; then \
        bspc node -t tiled ; \
    fi

super + comma
    bspc node -g sticky

super + period
    winID="$(bspc query -N -n .hidden | tail -n1)" ; \
    bspc node $winID --to-desktop focused ; \
    bspc node $winID -g hidden=off ; \
    bspc node -f $winID

super + slash
    bspc node -g hidden
